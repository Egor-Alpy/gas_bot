2024-06-05 15:38:20 | DEB | Consider installing rusty-rlp to improve pyrlp performance with a rust basedbackend. Not currently functional for Python 3.11
2024-06-05 15:38:21 | INF | Database: table 'users' has been connected!
2024-06-05 15:38:21 | INF | Database: table 'channels' has been connected!
2024-06-05 15:38:21 | INF | Thread: Sending process has been started!
2024-06-05 15:38:21 | DEB | Using proactor: IocpProactor
2024-06-05 15:38:21 | DEB | Make request: "getMe" with data: "{}" and files "None"
2024-06-05 15:38:22 | DEB | Response for getMe: [200] "'{"ok":true,"result":{"id":6992604156,"is_bot":true,"first_name":"ETH Gas Monitoring Bot","username":"tokito_gasbot","can_join_groups":true,"can_read_all_group_messages":false,"supports_inline_queries":false,"can_connect_to_business":false}}'"
2024-06-05 15:38:22 | INF | Bot: ETH Gas Monitoring Bot [@tokito_gasbot]
2024-06-05 15:38:22 | DEB | Make request: "getWebhookInfo" with data: "{}" and files "None"
2024-06-05 15:38:22 | DEB | Response for getWebhookInfo: [200] "'{"ok":true,"result":{"url":"","has_custom_certificate":false,"pending_update_count":0}}'"
2024-06-05 15:38:22 | DEB | Make request: "deleteWebhook" with data: "{'drop_pending_updates': True}" and files "None"
2024-06-05 15:38:22 | DEB | Response for deleteWebhook: [200] "'{"ok":true,"result":true,"description":"Webhook is already deleted"}'"
2024-06-05 15:38:22 | WAR | Updates were skipped successfully.
2024-06-05 15:38:22 | DEB | Make request: "setMyCommands" with data: "{'commands': '[{"command": "/menu", "description": "настройки"}, {"command": "/help", "description": "поддержка"}]'}" and files "None"
2024-06-05 15:38:22 | DEB | Response for setMyCommands: [200] "'{"ok":true,"result":true}'"
2024-06-05 15:38:22 | DEB | ETH Gas Monitoring Bot has been started!
2024-06-05 15:38:22 | INF | Start polling.
2024-06-05 15:38:22 | DEB | Make request: "getWebhookInfo" with data: "{}" and files "None"
2024-06-05 15:38:22 | DEB | Response for getWebhookInfo: [200] "'{"ok":true,"result":{"url":"","has_custom_certificate":false,"pending_update_count":0}}'"
2024-06-05 15:38:22 | DEB | Make request: "getUpdates" with data: "{'timeout': 20}" and files "None"
2024-06-05 15:38:42 | DEB | Response for getUpdates: [200] "'{"ok":true,"result":[]}'"
2024-06-05 15:38:42 | DEB | Make request: "getUpdates" with data: "{'timeout': 20}" and files "None"
2024-06-05 15:39:02 | DEB | Response for getUpdates: [200] "'{"ok":true,"result":[]}'"
2024-06-05 15:39:03 | DEB | Make request: "getUpdates" with data: "{'timeout': 20}" and files "None"
2024-06-05 15:39:23 | DEB | Response for getUpdates: [200] "'{"ok":true,"result":[]}'"
2024-06-05 15:39:23 | DEB | Make request: "getUpdates" with data: "{'timeout': 20}" and files "None"
2024-06-05 15:39:43 | DEB | Response for getUpdates: [200] "'{"ok":true,"result":[]}'"
2024-06-05 15:39:43 | DEB | Make request: "getUpdates" with data: "{'timeout': 20}" and files "None"
2024-06-05 15:39:56 | INF | Stop polling...
2024-06-05 15:39:56 | WAR | Goodbye!
2024-06-05 15:39:56 | DEB | ETH Gas Monitoring Bot has been finished!
2024-06-05 15:39:56 | INF | Bot: ETH Gas Monitoring Bot [@tokito_gasbot]
2024-06-05 15:39:56 | DEB | Make request: "getWebhookInfo" with data: "{}" and files "None"
2024-06-05 15:39:57 | DEB | Response for getWebhookInfo: [200] "'{"ok":true,"result":{"url":"","has_custom_certificate":false,"pending_update_count":0}}'"
2024-06-05 15:39:57 | DEB | Make request: "deleteWebhook" with data: "{'drop_pending_updates': True}" and files "None"
2024-06-05 15:39:57 | DEB | Response for deleteWebhook: [200] "'{"ok":true,"result":true,"description":"Webhook is already deleted"}'"
2024-06-05 15:39:57 | WAR | Updates were skipped successfully.
2024-06-05 15:39:57 | DEB | Make request: "setMyCommands" with data: "{'commands': '[{"command": "/menu", "description": "настройки"}, {"command": "/help", "description": "поддержка"}]'}" and files "None"
2024-06-05 15:39:57 | DEB | Response for setMyCommands: [200] "'{"ok":true,"result":true}'"
2024-06-05 15:39:57 | DEB | ETH Gas Monitoring Bot has been started!
2024-06-05 15:39:57 | INF | Start polling.
2024-06-05 15:39:57 | DEB | Make request: "getWebhookInfo" with data: "{}" and files "None"
2024-06-05 15:39:57 | DEB | Response for getWebhookInfo: [200] "'{"ok":true,"result":{"url":"","has_custom_certificate":false,"pending_update_count":0}}'"
2024-06-05 15:39:57 | DEB | Make request: "getUpdates" with data: "{'timeout': 20}" and files "None"
2024-06-05 15:39:57 | ERR | Cause exception while getting updates.
Traceback (most recent call last):
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiogram\bot\api.py", line 139, in make_request
    async with session.post(url, data=req, **kwargs) as response:
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiohttp\client.py", line 1167, in __aenter__
    self._resp = await self._coro
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiohttp\client.py", line 586, in _request
    await resp.start(conn)
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiohttp\client_reqrep.py", line 905, in start
    message, payload = await protocol.read()  # type: ignore[union-attr]
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiohttp\streams.py", line 616, in read
    await self._waiter
aiohttp.client_exceptions.ClientOSError: [Errno 1] [SSL: APPLICATION_DATA_AFTER_CLOSE_NOTIFY] application data after close notify (_ssl.c:2702)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiogram\dispatcher\dispatcher.py", line 381, in start_polling
    updates = await self.bot.get_updates(
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiogram\bot\bot.py", line 110, in get_updates
    result = await self.request(api.Methods.GET_UPDATES, payload)
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiogram\bot\base.py", line 236, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "C:\Users\Егор\OneDrive\Рабочий стол\AT Industries\ORDER00X\gas_bot\.venv\lib\site-packages\aiogram\bot\api.py", line 142, in make_request
    raise exceptions.NetworkError(f"aiohttp client throws an error: {e.__class__.__name__}: {e}")
aiogram.utils.exceptions.NetworkError: Aiohttp client throws an error: ClientOSError: [Errno 1] [SSL: APPLICATION_DATA_AFTER_CLOSE_NOTIFY] application data after close notify (_ssl.c:2702)
